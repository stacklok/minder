// Code generated by MockGen. DO NOT EDIT.
// Source: ./manager.go
//
// Generated by this command:
//
//	mockgen -package mock_manager -destination=../../../../internal/providers/manager/mock/if_manager.go -source=./manager.go
//

// Package mock_manager is a generated GoMock package.
package mock_manager

import (
	context "context"
	json "encoding/json"
	http "net/http"
	reflect "reflect"

	db "github.com/mindersec/minder/internal/db"
	v1 "github.com/mindersec/minder/pkg/providers/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockProviderClassManager is a mock of ProviderClassManager interface.
type MockProviderClassManager struct {
	ctrl     *gomock.Controller
	recorder *MockProviderClassManagerMockRecorder
}

// MockProviderClassManagerMockRecorder is the mock recorder for MockProviderClassManager.
type MockProviderClassManagerMockRecorder struct {
	mock *MockProviderClassManager
}

// NewMockProviderClassManager creates a new mock instance.
func NewMockProviderClassManager(ctrl *gomock.Controller) *MockProviderClassManager {
	mock := &MockProviderClassManager{ctrl: ctrl}
	mock.recorder = &MockProviderClassManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderClassManager) EXPECT() *MockProviderClassManagerMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockProviderClassManager) Build(ctx context.Context, config *db.Provider) (v1.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", ctx, config)
	ret0, _ := ret[0].(v1.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockProviderClassManagerMockRecorder) Build(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockProviderClassManager)(nil).Build), ctx, config)
}

// Delete mocks base method.
func (m *MockProviderClassManager) Delete(ctx context.Context, config *db.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProviderClassManagerMockRecorder) Delete(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProviderClassManager)(nil).Delete), ctx, config)
}

// GetSupportedClasses mocks base method.
func (m *MockProviderClassManager) GetSupportedClasses() []db.ProviderClass {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedClasses")
	ret0, _ := ret[0].([]db.ProviderClass)
	return ret0
}

// GetSupportedClasses indicates an expected call of GetSupportedClasses.
func (mr *MockProviderClassManagerMockRecorder) GetSupportedClasses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedClasses", reflect.TypeOf((*MockProviderClassManager)(nil).GetSupportedClasses))
}

// GetWebhookHandler mocks base method.
func (m *MockProviderClassManager) GetWebhookHandler() http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookHandler")
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// GetWebhookHandler indicates an expected call of GetWebhookHandler.
func (mr *MockProviderClassManagerMockRecorder) GetWebhookHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookHandler", reflect.TypeOf((*MockProviderClassManager)(nil).GetWebhookHandler))
}

// MarshallConfig mocks base method.
func (m *MockProviderClassManager) MarshallConfig(ctx context.Context, class db.ProviderClass, config json.RawMessage) (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshallConfig", ctx, class, config)
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshallConfig indicates an expected call of MarshallConfig.
func (mr *MockProviderClassManagerMockRecorder) MarshallConfig(ctx, class, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshallConfig", reflect.TypeOf((*MockProviderClassManager)(nil).MarshallConfig), ctx, class, config)
}
